nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[c(1, curr_alphaX_ind + 1)],
Sigma_prior = Sigma_prior[c(1, curr_alphaX_ind + 1),
c(1, curr_alphaX_ind + 1)])
logAR <- logAR + LogPriorOdds(proposed = prop_alphaX, current = curr_alphaX,
other_model = curr_alphaY, out_model = FALSE,
omega = omega)
r <- NULL
r$alpha <- curr_alphaX
r$acc <- FALSE
if (log(runif(1)) < logAR) {
r$acc <- TRUE
r$alpha <- prop_alphaX
}
return(r)
}
alphaX <- UpdateAlphaX(X = X, D = D, curr_alphaX = alphas$X[ii - 1, ],
curr_alphaY = alphas$Y[ii - 1, ],
nu_prior = nu_priorX, lambda_prior = lambda_priorX,
mu_prior = mu_priorX, Sigma_prior = Sigma_priorX,
omega = omega)
alphas$X <- alphaX$alpha
acc[1] <- acc[1] + alphaX$acc
curr_alphaY
prop_alphaX <- curr_alphaX
wh_change <- sample(num_conf, 1)
prop_alphaX[wh_change] <- 1 - prop_alphaX[wh_change]
curr_alphaX_ind <- which(curr_alphaX == 1)
prop_alphaX_ind <- which(prop_alphaX == 1)
logAR <- CalcLogLike(outcome = X, design_mat = D[, prop_alphaX_ind],
nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[c(1, prop_alphaX_ind + 1)],
Sigma_prior = Sigma_prior[c(1, prop_alphaX_ind + 1),
c(1, prop_alphaX_ind + 1)]) -
CalcLogLike(outcome = X, design_mat = D[, curr_alphaX_ind],
nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[c(1, curr_alphaX_ind + 1)],
Sigma_prior = Sigma_prior[c(1, curr_alphaX_ind + 1),
c(1, curr_alphaX_ind + 1)])
logAR
LogPriorOdds(proposed = prop_alphaX, current = curr_alphaX,
other_model = curr_alphaY, out_model = FALSE,
omega = omega)
proposed = prop_alphaX
current = curr_alphaX
other_model = curr_alphaY
out_model = FALSE
wh_change <- which(proposed != current)
wh_change
cbind(proposed, current)
r <- 1
out_model
other_model
LogPriorOdds <- function(proposed, current, other_model, out_model, omega) {
wh_change <- which(proposed != current)
r <- 1
if (out_model) {  # If we are updating the outcome model.
if (other_model[wh_change] == 1) {  # The exposure model includes the covariate.
if (proposed[wh_change] == 1) {  # If the proposed model includes the covariate.
r <- omega
} else {  # The proposed model does not include the covariate.
r <- 1 / omega
}
}
} else {  # If we are updating the exposure model.
if (other_model[wh_change] == 0) {
if (proposed[wh_change] == 0) {
r <- omega
} else {
r <- 1 / omega
}
}
}
return(r)
}
alphaX <- UpdateAlphaX(X = X, D = D, curr_alphaX = alphas$X[ii - 1, ],
curr_alphaY = alphas$Y[ii - 1, ],
nu_prior = nu_priorX, lambda_prior = lambda_priorX,
mu_prior = mu_priorX, Sigma_prior = Sigma_priorX,
omega = omega)
alphas$X <- alphaX$alpha
acc[1] <- acc[1] + alphaX$acc
# Update alphaY
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alpha$X[ii, ],
curr_alphaY = alpha$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y <- alphaY$alpha
acc[2] <- acc[2] + alphaY$acc
# Update alphaY
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y <- alphaY$alpha
acc[2] <- acc[2] + alphaY$acc
UpdateAlphaY <- function(Y, X, D, curr_alphaX, curr_alphaY, beta, nu_prior,
lambda_prior, mu_prior, Sigma_prior, omega) {
prop_alphaY <- curr_alphaY
wh_change <- sample(num_conf, 1)
prop_alphaY[wh_change] <- 1 - prop_alphaY[wh_change]
curr_alphaY_ind <- which(curr_alphaY == 1)
prop_alphaY_ind <- which(prop_alphaY == 1)
outcome <- Y - X * beta
logAR <- CalcLogLike(outcome = outcome, design_mat = D[, prop_alphaY_ind],
nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[1, prop_alphaY_ind + 1],
Sigma_prior = Sigma_prior[c(1, prop_alphaY_ind + 2),
c(1, prop_alphaY_ind + 2)]) -
CalcLogLike(outcome = X, design_mat = D[, curr_alphaY_ind],
nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[c(1, curr_alphaY_ind + 2)],
Sigma_prior = Sigma_prior[c(1, curr_alphaY_ind + 2),
c(1, curr_alphaY_ind + 2)])
logAR <- logAR + LogPriorOdds(proposed = prop_alphaY, current = curr_alphaY,
other_model = curr_alphaX, out_model = TRUE,
omega = omega)
r <- NULL
r$alpha <- curr_alphaY
r$acc <- FALSE
if (log(runif(1)) < logAR) {
r$acc <- TRUE
r$alpha <- prop_alphaY
}
return(r)
}
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y <- alphaY$alpha
UpdateAlphaY <- function(Y, X, D, curr_alphaX, curr_alphaY, beta, nu_prior,
lambda_prior, mu_prior, Sigma_prior, omega) {
prop_alphaY <- curr_alphaY
wh_change <- sample(num_conf, 1)
prop_alphaY[wh_change] <- 1 - prop_alphaY[wh_change]
curr_alphaY_ind <- which(curr_alphaY == 1)
prop_alphaY_ind <- which(prop_alphaY == 1)
outcome <- Y - X * beta
logAR <- CalcLogLike(outcome = outcome, design_mat = D[, prop_alphaY_ind],
nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[c(1, prop_alphaY_ind + 1)],
Sigma_prior = Sigma_prior[c(1, prop_alphaY_ind + 2),
c(1, prop_alphaY_ind + 2)]) -
CalcLogLike(outcome = X, design_mat = D[, curr_alphaY_ind],
nu_prior = nu_prior, lambda_prior = lambda_prior,
mu_prior = mu_prior[c(1, curr_alphaY_ind + 2)],
Sigma_prior = Sigma_prior[c(1, curr_alphaY_ind + 2),
c(1, curr_alphaY_ind + 2)])
logAR <- logAR + LogPriorOdds(proposed = prop_alphaY, current = curr_alphaY,
other_model = curr_alphaX, out_model = TRUE,
omega = omega)
r <- NULL
r$alpha <- curr_alphaY
r$acc <- FALSE
if (log(runif(1)) < logAR) {
r$acc <- TRUE
r$alpha <- prop_alphaY
}
return(r)
}
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y <- alphaY$alpha
nu_priorY = 0.01
lambda_priorY = 0.01
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
ii
alphas <- NULL
alphas$X <- array(NA, dim = c(Nsims, num_conf))
alphas$Y <- alphas$X
alphas$X[1, ] <- rbinom(num_conf, 1, 1 / 2)
alphas$Y[1, ] <- rbinom(num_conf, 1, 1 / 2)
betas <- rep(NA, Nsims)
acc <- c(0, 0)
alphaX <- UpdateAlphaX(X = X, D = D, curr_alphaX = alphas$X[ii - 1, ],
curr_alphaY = alphas$Y[ii - 1, ],
nu_prior = nu_priorX, lambda_prior = lambda_priorX,
mu_prior = mu_priorX, Sigma_prior = Sigma_priorX,
omega = omega)
alphas$X[ii, ] <- alphaX$alpha
acc[1] <- acc[1] + alphaX$acc
# Update alphaY
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y[ii, ] <- alphaY$alpha
acc[2] <- acc[2] + alphaY$acc
curr_alphaX = alphas$X[ii, ]
curr_alphaY = alphas$Y[ii - 1, ]
betas[1] <- rnorm(1, 0, 1)
# Update alphaY
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y[ii, ] <- alphaY$alpha
acc[2] <- acc[2] + alphaY$acc
# Update beta.
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
UpdateBeta <- function(Y, X, D, curr_alphaY, nu_prior, lambda_prior, mu_prior,
Sigma_prior) {
n <- length(Y)
curr_alphaY_ind <- which(curr_alphaY == 1)
design_mat <- cbind(1, X, D[, curr_alphaY_ind])
prior_Sigma <- Sigma_prior[c(1, 2, curr_alphaY_ind + 2),
c(1, 2, curr_alphaY_ind + 2)]
prior_Sigma_inv <- solve(prior_Sigma)
prior_mean <- matrix(mu_prior[c(1, 2, curr_alphaY_ind + 2)], ncol = 1,
nrow = length(curr_alphaY_ind) + 2)
mean_betas <- solve(t(design_mat) %*% design_mat + prior_Sigma_inv) %*%
(prior_Sigma_inv %*% prior_mean + t(design_mat) %*% Y)
mean_betas <- matrix(mean_betas, nrow = length(mean_betas), ncol = 1)
Sigma_betas <- (n + nu_prior) ^ (- 1) *
(nu_prior * lambda_prior + t(Y - design_mat %*% mean_betas) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean) %*%
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
return(rnorm(1, mean = mean_betas[2], sd = sqrt(Sigma_betas[2, 2])))
}
# Update beta.
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
UpdateBeta <- function(Y, X, D, curr_alphaY, nu_prior, lambda_prior, mu_prior,
Sigma_prior) {
n <- length(Y)
Y <- matrix(Y, nrow = n, ncol = 1)
curr_alphaY_ind <- which(curr_alphaY == 1)
design_mat <- cbind(1, X, D[, curr_alphaY_ind])
prior_Sigma <- Sigma_prior[c(1, 2, curr_alphaY_ind + 2),
c(1, 2, curr_alphaY_ind + 2)]
prior_Sigma_inv <- solve(prior_Sigma)
prior_mean <- matrix(mu_prior[c(1, 2, curr_alphaY_ind + 2)], ncol = 1,
nrow = length(curr_alphaY_ind) + 2)
mean_betas <- solve(t(design_mat) %*% design_mat + prior_Sigma_inv) %*%
(prior_Sigma_inv %*% prior_mean + t(design_mat) %*% Y)
mean_betas <- matrix(mean_betas, nrow = length(mean_betas), ncol = 1)
Sigma_betas <- (n + nu_prior) ^ (- 1) *
(nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas), ncol = 1, nrow = n) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean) %*%
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
return(rnorm(1, mean = mean_betas[2], sd = sqrt(Sigma_betas[2, 2])))
}
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
UpdateBeta <- function(Y, X, D, curr_alphaY, nu_prior, lambda_prior, mu_prior,
Sigma_prior) {
n <- length(Y)
Y <- matrix(Y, nrow = n, ncol = 1)
curr_alphaY_ind <- which(curr_alphaY == 1)
design_mat <- cbind(1, X, D[, curr_alphaY_ind])
prior_Sigma <- Sigma_prior[c(1, 2, curr_alphaY_ind + 2),
c(1, 2, curr_alphaY_ind + 2)]
prior_Sigma_inv <- solve(prior_Sigma)
prior_mean <- matrix(mu_prior[c(1, 2, curr_alphaY_ind + 2)], ncol = 1,
nrow = length(curr_alphaY_ind) + 2)
mean_betas <- solve(t(design_mat) %*% design_mat + prior_Sigma_inv) %*%
(prior_Sigma_inv %*% prior_mean + t(design_mat) %*% Y)
mean_betas <- matrix(mean_betas, nrow = length(mean_betas), ncol = 1)
Sigma_betas <- (n + nu_prior) ^ (- 1) *
(nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean) %*%
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
return(rnorm(1, mean = mean_betas[2], sd = sqrt(Sigma_betas[2, 2])))
}
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
curr_alphaY = alphas$Y[ii, ]
n <- length(Y)
Y <- matrix(Y, nrow = n, ncol = 1)
curr_alphaY_ind <- which(curr_alphaY == 1)
design_mat <- cbind(1, X, D[, curr_alphaY_ind])
prior_Sigma <- Sigma_prior[c(1, 2, curr_alphaY_ind + 2),
c(1, 2, curr_alphaY_ind + 2)]
prior_Sigma_inv <- solve(prior_Sigma)
prior_mean <- matrix(mu_prior[c(1, 2, curr_alphaY_ind + 2)], ncol = 1,
nrow = length(curr_alphaY_ind) + 2)
prior_mean
curr_alphaY
sum(curr_alphaY)
dim(prior_Sigma)
mean_betas <- solve(t(design_mat) %*% design_mat + prior_Sigma_inv) %*%
(prior_Sigma_inv %*% prior_mean + t(design_mat) %*% Y)
mean_betas <- matrix(mean_betas, nrow = length(mean_betas), ncol = 1)
dim(mean_betas)
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y
t(prior_mean - mean_betas)
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean
(nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean) *
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
(nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean)
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
dim((nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean))
Sigma_betas <- (n + nu_prior) ^ (- 1) *
as.numeric((nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean)) *
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
UpdateBeta <- function(Y, X, D, curr_alphaY, nu_prior, lambda_prior, mu_prior,
Sigma_prior) {
n <- length(Y)
Y <- matrix(Y, nrow = n, ncol = 1)
curr_alphaY_ind <- which(curr_alphaY == 1)
design_mat <- cbind(1, X, D[, curr_alphaY_ind])
prior_Sigma <- Sigma_prior[c(1, 2, curr_alphaY_ind + 2),
c(1, 2, curr_alphaY_ind + 2)]
prior_Sigma_inv <- solve(prior_Sigma)
prior_mean <- matrix(mu_prior[c(1, 2, curr_alphaY_ind + 2)], ncol = 1,
nrow = length(curr_alphaY_ind) + 2)
mean_betas <- solve(t(design_mat) %*% design_mat + prior_Sigma_inv) %*%
(prior_Sigma_inv %*% prior_mean + t(design_mat) %*% Y)
mean_betas <- matrix(mean_betas, nrow = length(mean_betas), ncol = 1)
Sigma_betas <- (n + nu_prior) ^ (- 1) *
as.numeric((nu_prior * lambda_prior +
t(matrix(Y - design_mat %*% mean_betas, ncol = 1, nrow = n)) %*% Y +
t(prior_mean - mean_betas) %*% prior_Sigma_inv %*% prior_mean)) *
solve(t(design_mat) %*% design_mat + prior_Sigma_inv)
return(rnorm(1, mean = mean_betas[2], sd = sqrt(Sigma_betas[2, 2])))
}
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
bac <- BAC(X, Y, D, 300)
BAC <- function(X, Y, D, Nsims, mu_priorX = NULL, mu_priorY = NULL, nu_priorX = 0.01,
nu_priorY = 0.01, lambda_priorX = 0.01,  lambda_priorY = 0.01,
Sigma_priorX = NULL, Sigma_priorY = NULL, omega = 50000) {
num_conf <- ncol(D)
if (is.null(mu_priorX)) {
mu_priorX <- rep(0, num_conf + 1)
}
if (is.null(mu_priorY)) {
mu_priorY <- rep(0, num_conf + 2)
}
if (is.null(Sigma_priorX)) {
Sigma_priorX <- 100 ^ 2 * diag(num_conf + 1)
}
if (is.null(Sigma_priorY)) {
Sigma_priorY <- 100 ^ 2 * diag(num_conf + 2)
}
alphas <- NULL
alphas$X <- array(NA, dim = c(Nsims, num_conf))
alphas$Y <- alphas$X
alphas$X[1, ] <- rbinom(num_conf, 1, 1 / 2)
alphas$Y[1, ] <- rbinom(num_conf, 1, 1 / 2)
betas <- rep(NA, Nsims)
betas[1] <- rnorm(1, 0, 1)
acc <- c(0, 0)
for (ii in 2:Nsims) {
# Update alphaX
alphaX <- UpdateAlphaX(X = X, D = D, curr_alphaX = alphas$X[ii - 1, ],
curr_alphaY = alphas$Y[ii - 1, ],
nu_prior = nu_priorX, lambda_prior = lambda_priorX,
mu_prior = mu_priorX, Sigma_prior = Sigma_priorX,
omega = omega)
alphas$X[ii, ] <- alphaX$alpha
acc[1] <- acc[1] + alphaX$acc
# Update alphaY
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y[ii, ] <- alphaY$alpha
acc[2] <- acc[2] + alphaY$acc
# Update beta.
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
}
r <- NULL
r$alphas <- alphas
r$acc <- acc / (Nsims - 1)
r$beta <- betas
return(r)
}
bac <- BAC(X, Y, D, 300)
mean(betas)
mean(bac$betas)
names(bac)
bac$acc
bac$alphas
apply(bac$alphas$X, 2, mean)
apply(bac$alphas$Y, 2, mean)
hist(bac$beta)
mean(bac$beta)
lm(Y ~ X + C[, 1] + C[, 2] + C[, 3])
lm(Y ~ X + D[, 1] + D[, 2] + D[, 3])
setwd('~/Github/BAC/')
source('CalcLogLike_function.R')
source('LogPriorOdds_function.R')
source('UpdateAlphaX_function.R')
source('UpdateAlphaY_function.R')
source('UpdateBeta_function.R')
source('BAC_function.R')
num_conf <- 20
N <- 300
D <- rnorm(N * num_conf, mean = 0, sd = 1)
D <- matrix(D, nrow = N, ncol = num_conf)
X <- D[, 1] + D[, 2] + D[, 3] + rnorm(N, 0, 1)
Y <- D[, 1] + D[, 2] + rnorm(N, 0, 1)
bac <- BAC(X = X, Y = Y, D = D, Nsims = 1000)
apply(bac$alphas$X, 2, mean)
apply(bac$alphas$Y, 2, mean)
mean(bac$beta)
lm(Y ~ D[, 1] + D[, 2])$coef[2]
lm(Y ~ X + D[, 1] + D[, 2])$coef[2]
rm(list = ls())
setwd('~/Github/BAC/')
source('CalcLogLike_function.R')
source('LogPriorOdds_function.R')
source('UpdateAlphaX_function.R')
source('UpdateAlphaY_function.R')
source('UpdateBeta_function.R')
source('BAC_function.R')
num_conf <- 20
N <- 300
D <- rnorm(N * num_conf, mean = 0, sd = 1)
D <- matrix(D, nrow = N, ncol = num_conf)
X <- D[, 1] + D[, 2] + D[, 3] + rnorm(N, 0, 1)
Y <- D[, 1] + D[, 2] + rnorm(N, 0, 1)
bac <- BAC(X = X, Y = Y, D = D, Nsims = 1000)
apply(bac$alphas$X, 2, mean)
apply(bac$alphas$Y, 2, mean)
mean(bac$beta)
lm(Y ~ D[, 1] + D[, 2])$coef[2]
lm(Y ~ X + D[, 1] + D[, 2])$coef[2]
BAC <- function(X, Y, D, Nsims, mu_priorX = NULL, mu_priorY = NULL, nu_priorX = 0.01,
nu_priorY = 0.01, lambda_priorX = 0.01,  lambda_priorY = 0.01,
Sigma_priorX = NULL, Sigma_priorY = NULL, omega = 50000) {
num_conf <- ncol(D)
if (is.null(mu_priorX)) {
mu_priorX <- rep(0, num_conf + 1)
}
if (is.null(mu_priorY)) {
mu_priorY <- rep(0, num_conf + 2)
}
if (is.null(Sigma_priorX)) {
Sigma_priorX <- 100 ^ 2 * diag(num_conf + 1)
}
if (is.null(Sigma_priorY)) {
Sigma_priorY <- 100 ^ 2 * diag(num_conf + 2)
}
alphas <- NULL
alphas$X <- array(NA, dim = c(Nsims, num_conf))
alphas$Y <- alphas$X
alphas$X[1, ] <- rbinom(num_conf, 1, 1 / 2)
alphas$Y[1, ] <- rbinom(num_conf, 1, 1 / 2)
betas <- rep(NA, Nsims)
betas[1] <- rnorm(1, 0, 1)
acc <- c(0, 0)
for (ii in 2:Nsims) {
if (ii %% 100 == 0) {
print(paste0(round(ii / Nsims, 2) * 100, '% completed.'))
}
# Update alphaX
alphaX <- UpdateAlphaX(X = X, D = D, curr_alphaX = alphas$X[ii - 1, ],
curr_alphaY = alphas$Y[ii - 1, ],
nu_prior = nu_priorX, lambda_prior = lambda_priorX,
mu_prior = mu_priorX, Sigma_prior = Sigma_priorX,
omega = omega)
alphas$X[ii, ] <- alphaX$alpha
acc[1] <- acc[1] + alphaX$acc
# Update alphaY
alphaY <- UpdateAlphaY(Y = Y, X = X, D = D, curr_alphaX = alphas$X[ii, ],
curr_alphaY = alphas$Y[ii - 1, ], beta = betas[ii - 1],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY,
omega = omega)
alphas$Y[ii, ] <- alphaY$alpha
acc[2] <- acc[2] + alphaY$acc
# Update beta.
betas[ii] <- UpdateBeta(Y = Y, X = X, D = D, curr_alphaY = alphas$Y[ii, ],
nu_prior = nu_priorY, lambda_prior = lambda_priorY,
mu_prior = mu_priorY, Sigma_prior = Sigma_priorY)
}
r <- NULL
r$alphas <- alphas
r$acc <- acc / (Nsims - 1)
r$beta <- betas
return(r)
}
bac <- BAC(X = X, Y = Y, D = D, Nsims = 100)
bac <- BAC(X = X, Y = Y, D = D, Nsims = 210)
